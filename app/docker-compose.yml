version: '3.8'

services:
  # Traefik Reverse Proxy with Let's Encrypt
  traefik:
    image: traefik:v3.0
    command:
      # API and dashboard configuration
      - --api.dashboard=true
      - --api.insecure=true
      # Swarm provider (replaces docker.swarmMode in v3)
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.network=traefik-public
      # Entry points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Let's Encrypt configuration
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # Global redirect to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Logging
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(`traefik.localhost`)
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=letsencrypt
        - traefik.http.services.traefik.loadbalancer.server.port=8080

  # Frontend - Nginx
  frontend:
    image: bhoomildayani182/swarm-frontend:latest
    networks:
      - traefik-public
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`localhost`) || PathPrefix(`/`)
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certresolver=letsencrypt
        - traefik.http.services.frontend.loadbalancer.server.port=80
        - traefik.docker.network=traefik-public

  # Backend API - Node.js
  backend:
    image: bhoomildayani182/swarm-backend:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://user:password@postgres:5432/appdb
    networks:
      - app-network
      - traefik-public
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.tls.certresolver=letsencrypt
        - traefik.http.services.backend.loadbalancer.server.port=3000
        - traefik.docker.network=traefik-public

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure

  # Health Check Service
  healthcheck:
    image: alpine:latest
    command: |
      sh -c "
        apk add --no-cache curl &&
        sleep 60 &&
        while true; do
          echo 'Checking frontend health...'
          curl -f http://frontend/ || echo 'Frontend check failed'
          echo 'Checking backend health...'
          curl -f http://backend:3000/health || echo 'Backend check failed'
          sleep 30
        done
      "
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

networks:
  traefik-public:
    external: true
  app-network:
    driver: overlay
    attachable: true

volumes:
  traefik-letsencrypt:
  postgres-data:
  redis-data:
